/* XPECT_SETUP org.eclipse.mita.program.tests.controlflow.ControlStructuresTest 
Workspace {
	Project "testproject" {
	}  
}
END_SETUP */

package test;
import platforms.unittest;

// Code can branch using if statements
// XPECT noCompileErrors
function testIfSuccess() : void {
	var foo = 10;
	
	if(foo >= 15) {
		print("That's high");
	} else if(foo >= 10){
		print("That's less high");
	} else {
		print("That's not high");
	}
} 

function testIfFail(){
	// XPECT errors --> "prim»i»10 (:: xint8) has a different type than foo (:: bool)" at "10"
	var foo = 10;
	// If-conditions must be bool
	if(foo) { }
}

// XPECT noCompileErrors
function testLoopsSuccess() : void {
	// Traditional for loops are supported
	for(var i: uint8 = 0; i < 10; i=i+1) { 
		var x = i;
	}
	
	// Advanced for loops
	var list = new array<int16, 10>();
	for (var element in list) { 
		var x = element;
	}
	
	// in nested loops all vars are in scope
	
	let l = [1,2,3,4];
	for(var j in l) {
		for(var i = 0; i < 4; i++) {
			var k = i + j;
		}
	}
	for(var i = 0; i < 4; i++) {
		for(var j in l) {
			var k = i + j;
		}
	}
	
	
	for(var i in l) {
		for(var j in l) {
			var k = i + j;
		}
	}
	
	for(var i = 0; i < 4; i++) {
		for(var j = 0; j < 4; j++) {
			var k = i + j;
		}
	}
	
	
	//While loops are supported
	while(true) { }
	//and do while loops are supported
	do { } while(true)
	
}

function testLoopsFail() {
	var x : int32 = 10;

	// XPECT errors --> "Types bool and int32 are not the same." at "x"
	while(x) { }
	
	// XPECT errors --> "Types bool and int32 are not the same." at "x"
	do { } while(x)
	
}

// XPECT noCompileErrors
function testConditionalSuccess() {
	var x  = true ? 5 : 1;
	x = x > 10 ? 1 : 3;
}

function testConditionalFail() {
	/* XPECT errors ---
		"Types xint8 and bool are not the same." at "5"
	--- */
	var x  = 5 ? 5 : 1;
}



