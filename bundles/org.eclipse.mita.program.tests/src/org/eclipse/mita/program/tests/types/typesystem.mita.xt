/* XPECT_SETUP org.eclipse.mita.program.tests.types.TypesTest 
Workspace {
	Project "testproject" {
	}
}
END_SETUP */

package test;
import platforms.unittest;

setup net : MySingletonConnectivity { 
} 
    
setup backend : MyConnectivity {
	cfg00 = "mqtt://192.168.137.1";
	cfg04 = net;
	var t = vci01(p01=10);
}        
   
struct mData {
	var x: int32;
	var y: int32; 
	var z: int32;
	var r: uint16;
}     
   
alt anyVec {
	vec0d | vec1d: {x: int32} | vec2d: {x: int32, y: bool?}
}   

//XPECT inferredType --> __args(optional<int32>) → optional<int32>
fn id(x: int32?): int32? {
	return x;
}

//XPECT inferredType --> __args(int32) → int32
fn id(x: int32): int32 {
	return x;  
}      
//XPECT inferredType --> ∀[A].__args(string<A>) → string<A>
//XPECT warnings ---> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "id"
//XPECT errors ---> "Couldn't infer size" at "string<Size>"
fn <Size> id(x: string<Size>): string<Size> {
	return x;
}   

//XPECT inferredType --> __args(int32, int8) → int32
fn id2(x: int32, y: int8): int32 {
	return x;  
}      
  
//XPECT inferredType --> ∀[A].__args(string<A>, int8) → string<A>
//XPECT warnings ---> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "id2"
//XPECT errors ---> "Couldn't infer size" at "string<Size>"
fn <Size> id2(x: string<Size>, y: int8): string<Size> {
	return x;
}
    
native checked fn C_Magnetometer_init(): void header "magnetometer.h";
native checked fn C_Magnetometer_read(): mData header "magnetometer.h";

every 100 milliseconds {
	let a : int32? = 0;
	let b = a.id();   
}

every 100 milliseconds { 
	// XPECT infos --> "<auto>.vec1d(<null>=prim»i»10) has type ∗anyVec(vec0d() | vec1d(int32) | vec2d(int32, optional<bool>))" at ".vec1d(10)"
	let c = .vec1d(10); 
	let d = c.x(); 
	let e = "asdf";
	let f = 8;
	// XPECT infos --> "? has type uint32" at "?"
	/*XPECT errors ---
		"Couldn't infer size" at "id(e)"
		"Couldn't infer size" at "let g: string<?> = id(e);"
		"Couldn't infer size" at "string<?>"
	--- */
	let g: string<?> = id(e);          
	let h = id(f);
	/*XPECT errors ---
		"Couldn't infer size" at ""
		"Couldn't infer size" at "id2(y=0, x=e)"
		"Couldn't infer size" at "let h2 = id2(y=0, x=e);"
	--- */
	let h2 = id2(y=0, x=e);
	let h3 = id2(y=0, x=f);    
	let m = C_Magnetometer_read();
	/* XPECT errors ---
		"Types with references must be initialized" at "let asdf: &&int32;"
	--- */
	let asdf: &&int32;    
	let wert: int32?;
	let foo: modality<uint16>;   
	let bar: uint32? = 10;
	let barp: uint16? = 10;
	let bar2 = bar;
	let bar3 = &bar2; 
	let bar4 = 1 == 1? *bar3: bar; 
	/* XPECT errors ---
		"Modalities must be used immediately. Add .read() after modality01" at "modality01"
	--- */
	let a: modality<uint32> = MySensor.modality01; 
	let asdfgasd = true && false;
	let a2 = f == (10 as int32); 
	/* XPECT infos ---
	 	 "<auto>.vec0d() has type ∗anyVec(vec0d() | vec1d(int32) | vec2d(int32, optional<bool>))" at ".vec0d"
	 	 "<auto>.vec1d(<null>=prim»i»10) has type ∗anyVec(vec0d() | vec1d(int32) | vec2d(int32, optional<bool>))" at ".vec1d(10)"
	 --- */
	let a3 = true? .vec0d: .vec1d(10);
	where(a3) {  
		is(anyVec.vec0d) { 
			  
		} 
		is(anyVec.vec1d -> x) {
			 
		} 
		is(anyVec.vec2d -> a1=vec2d.y, b1=vec2d.x) {
 
		}
		is(anyVec.vec2d -> a1=vec2d.y) {
		 
		} 
		is(anyVec.vec2d -> a1, b2) {
		
		}
		is(x: anyVec.vec1d) {
			
		} 
	}
//	let k = m.x;    
	//backend.t.write(`[${m.x}, ${m.y}, ${m.z}, ${m.r}]`);
}   
    
fn <T> foo2() {
	let bar: optional<T>; 
	let bar2 =  bar;
	let bar3 = &bar2;
	let bar4 = *bar3; 
	let bar6 = new array<int32, 10>();
	return;  
} 
 