/* XPECT_SETUP org.eclipse.mita.program.tests.types.TypesTest 
Workspace {
	Project "testproject" {
	}
}
END_SETUP */
 
package test;
import platforms.unittest;
 
function variableInference() : void { 
	//XPECT inferredType --> xint8
	var x = 10;
	//XPECT inferredType --> uint8
	var z : uint8 = x; 
} 

function variableInferenceExpression() : void {
	//XPECT inferredType --> int8
	var x: int8 = 10;
	//XPECT inferredType --> int16
	var z: int16 = (x * 3) + 10;
}

function variableInferenceOperationCall() : void {
	//XPECT inferredType --> array<int8, '10>
	var array : array<int8, 10> = new array<int8, 10>();
	//XPECT inferredType --> xint8  
	var x = 10;   
	testIt(x, 10);         
	//XPECT inferredType --> xint8
	var y = 10;
	testIt(param2 = y, param1 = 10);   
} 
 
function testIt(param1 : uint8, param2 : uint32) : bool {
	return true;
}

function variableInferenceExtensionOperationCall() : void {
	var opt : optional<int8> = 10;
	//XPECT inferredType --> int8 
	var x = opt.value();     
}

function variableInferenceRecursion() {
	//XPECT inferredType --> xint8
	var x = 10;
	//XPECT inferredType --> xint8
	var z = x;
}

function variableInferenceIf() {
	//XPECT inferredType --> xint8
	var x = 10;
	if(x > 10){
		
	}
}

function variableInferenceFloat() {
	//XPECT inferredType --> xint8
	var x  = 10;
	//XPECT inferredType --> f32
	var z : float = x as float;
	//XPECT inferredType --> f32
	var y = 10.0f; 
}
 
function variableInferenceDouble() {
	//XPECT inferredType --> xint8
	var x = 10;
	//XPECT inferredType --> f64
	var z : double = x as double;
	// XPECT inferredType --> f64
	var y = 10.0d; 
}

function variableInferenceGenerated() {
    //XPECT inferredType --> optional<int32>
    var xo: int32? = 1;
    //XPECT inferredType --> optional<int32>
    var yo = xo;
    
    //XPECT inferredType --> xint8
    var xs = 42;
    //XPECT inferredType --> string<'4>
    var ys = `${xs}`;
    
    //XPECT inferredType --> array<xint8, '4>
    var xa = [1,2,3,4];
    //XPECT inferredType --> array<xint8, '4>
    var ya = xa;
}

function variableInferenceBoolean() {
	//XPECT inferredType --> bool
	var x  = true;
}

function test(){
	//XPECT inferredType --> uint8
	var x = inferMe();  
}

function inferMe() {
	var z : uint8  = 10;
	return z;  
}

function inferByInitialization() {
	var x : uint8 = 10;
	var y : int8 = 10;
	//XPECT inferredType --> int16
	var z = x + y;
}	

